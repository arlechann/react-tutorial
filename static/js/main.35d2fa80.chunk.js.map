{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","slice","concat","handleClick","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iLAIMA,EAAS,SAAAC,GACd,OACC,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACEF,EAAMG,SAKJC,EAAQ,SAAAJ,GACb,IAAMK,EAAe,SAAAC,GAAC,OACrB,cAACP,EAAD,CACCI,MAAOH,EAAMO,QAAQD,GACrBJ,QAAS,kBAAMF,EAAME,QAAQI,OAI/B,OACC,gCACC,sBAAKL,UAAU,YAAf,UACEI,EAAa,GACbA,EAAa,GACbA,EAAa,MAEf,sBAAKJ,UAAU,YAAf,UACEI,EAAa,GACbA,EAAa,GACbA,EAAa,MAEf,sBAAKJ,UAAU,YAAf,UACEI,EAAa,GACbA,EAAa,GACbA,EAAa,UAMZG,EAAO,SAAAR,GACZ,IAmCIS,EAnCJ,EAA8BC,mBAAS,CAAC,CAAEH,QAASI,MAAM,GAAGC,KAAK,SAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAmBMC,EAAUN,EAAQE,GAClBK,EAASC,EAAgBF,EAAQZ,SAEjCe,EAAQT,EAAQU,KAAI,SAACC,EAAMC,GAChC,IAAMC,EAAOD,EACZ,eAAiBA,EACjB,mBACD,OACC,6BACC,wBAAQvB,QAAS,kBAdL,SAAAsB,GACdR,EAAcQ,GACdN,EAAWM,EAAO,IAAM,GAYCG,CAAOF,IAA9B,SAAsCC,KAD9BD,MAaX,OALChB,EADGW,EACM,WAAaA,EAEb,iBAAmBH,EAAU,IAAM,KAI5C,sBAAKhB,UAAU,OAAf,UACC,qBAAKA,UAAU,aAAf,SACC,cAACG,EAAD,CACCG,QAASY,EAAQZ,QACjBL,QAAS,SAACI,GAAD,OA3CO,SAAAA,GACnB,IACMC,EADUM,EAAQE,GACAR,QAAQqB,QAC5BP,EAAgBd,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKW,EAAU,IAAM,IAC7BH,EAAWD,EAAQe,MAAM,EAAGb,EAAa,GAAGc,OAAO,CAAC,CAAEtB,cACtDS,EAAcD,EAAa,GAC3BG,GAAYD,IAkCOa,CAAYxB,QAG9B,sBAAKL,UAAU,YAAf,UACC,8BAAMQ,IACN,6BAAKa,WAaT,SAASD,EAAgBd,GAWxB,IAVA,IAAMwB,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAECzB,EAAI,EAAGA,EAAIyB,EAAMC,OAAQ1B,IAAK,CACtC,kBAAkByB,EAAMzB,GAAxB,GAAO2B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GACrE,OAAO5B,EAAQ0B,GAGjB,OAAO,KAtBRG,IAASC,OACR,cAAC7B,EAAD,IACA8B,SAASC,eAAe,W","file":"static/js/main.35d2fa80.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Square = props => {\n\treturn (\n\t\t<button className=\"square\" onClick={props.onClick}>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n};\n\nconst Board = props => {\n\tconst renderSquare = i => (\n\t\t<Square\n\t\t\tvalue={props.squares[i]}\n\t\t\tonClick={() => props.onClick(i)}\n\t\t/>\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderSquare(0)}\n\t\t\t\t{renderSquare(1)}\n\t\t\t\t{renderSquare(2)}\n\t\t\t</div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderSquare(3)}\n\t\t\t\t{renderSquare(4)}\n\t\t\t\t{renderSquare(5)}\n\t\t\t</div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderSquare(6)}\n\t\t\t\t{renderSquare(7)}\n\t\t\t\t{renderSquare(8)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst Game = props => {\n\tconst [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\n\tconst [stepNumber, setStepNumber] = useState(0);\n\tconst [xIsNext, setXIsNext] = useState(true);\n\n\tconst handleClick = i => {\n\t\tconst current = history[stepNumber];\n\t\tconst squares = current.squares.slice();\n\t\tif (calculateWinner(squares) || squares[i]) {\n\t\t\treturn;\n\t\t}\n\t\tsquares[i] = xIsNext ? 'X' : 'O';\n\t\tsetHistory(history.slice(0, stepNumber + 1).concat([{ squares }]));\n\t\tsetStepNumber(stepNumber + 1);\n\t\tsetXIsNext(!xIsNext);\n\t};\n\n\tconst jumpTo = step => {\n\t\tsetStepNumber(step);\n\t\tsetXIsNext(step % 2 === 0);\n\t};\n\n\tconst current = history[stepNumber];\n\tconst winner = calculateWinner(current.squares);\n\n\tconst moves = history.map((step, move) => {\n\t\tconst desc = move ?\n\t\t\t'Go to move #' + move :\n\t\t\t'Go to game start';\n\t\treturn (\n\t\t\t<li key={move}>\n\t\t\t\t<button onClick={() => jumpTo(move)}>{desc}</button>\n\t\t\t</li>\n\t\t);\n\t});\n\n\tlet status;\n\tif (winner) {\n\t\tstatus = 'Winner: ' + winner;\n\t} else {\n\t\tstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\t}\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board\n\t\t\t\t\tsquares={current.squares}\n\t\t\t\t\tonClick={(i) => handleClick(i)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"game-info\">\n\t\t\t\t<div>{status}</div>\n\t\t\t\t<ol>{moves}</ol>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t];\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i];\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\t\treturn squares[a];\n\t\t}\n\t}\n\treturn null;\n}"],"sourceRoot":""}